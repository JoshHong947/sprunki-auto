---
description: 
globs: 
alwaysApply: false
---

# Your rule content

“现在根据以下原则和步骤，在现有项目的基础上完成指定任务。请务必遵循开发计划和最佳实践。在编写代码之前，请先思考并确认是否已存在相关实现，避免重复工作和创建不必要的文件。

🔒 **三不原则 (安全红线):**
1.  **不改动架构/依赖/无关文件:** 仅修改与当前任务直接相关的文件。无关文件示例：配置文件、构建脚本等。
2.  **不做计划外/重复功能:**  严格按照需求文档执行，避免引入未经批准的功能。需求来源：[文档版本/需求ID]
3.  **不创新文件/相似逻辑:**  除非现有模块完全无法满足需求，且经过评审确认，否则禁止创建新文件或编写重复逻辑。

🧠 **Chain-of-Thought (CoT) 思考链:**
1.  **[需求理解]**  详细解读任务需求，明确输入、输出和约束条件。需求来源：[文档版本/需求ID]
2.  **[环境评估]**  审视现有项目代码，利用代码扫描工具（如 Cursor 的代码扫描或 `grep` 命令）查找相关实现和文件。
3.  **[方案设计]**  基于需求和现有代码，设计最优解决方案。优先考虑复用现有代码，遵循 SOLID 原则，并明确说明选择的 SOLID 原则。
4.  **[代码实现]**  编写代码，确保代码风格一致、注释清晰，并易于理解和维护。
5.  **[代码测试]**  编写单元测试或其他测试用例，验证代码的正确性。
6.  **[结果验证]**  检查代码是否符合需求，是否遵循了三不原则，以及是否满足 SOLID 原则。

🛠️ **执行步骤:**
1.  **需求分析:**  [CoT: 需求理解] 详细分析任务需求。
2.  **环境评估:**  [CoT: 环境评估] 扫描项目代码，查找相关实现和文件。
3.  **方案设计:**  [CoT: 方案设计] 设计代码修改方案，并说明理由。
4.  **代码实现:**  [CoT: 代码实现] 编写代码。
6.  **代码审查:**  进行代码审查，确保代码质量。


🛡️ **防御性检查:**
! 每次输出必须包含以下验证标记：
-   ✅ **需求对齐:** [文档版本/需求ID]
-   ✅ **计划阶段:** [当前开发阶段]
-   ✅ **CoT 思路:**  清晰地描述上述 Chain-of-Thought 的每个步骤的思考过程。
-   ✅ **代码扫描:** [相关类/文件列表]
-   ✅ **SOLID 原则应用:** [说明应用了哪些 SOLID 原则，以及如何应用]
-   ✅ **分支检查:** [当前代码修改位于 `dev` 分支]

”
